mainmodule tester {
  mainchare Main {
    entry [nokeep] Main(CkArgMsg* m);

    entry void next(void);
    entry void completion(void);

    entry void run(int size) {
      serial { this->data = new double[size];
               this->totalTime = 0; }
      for (rep = 0; rep < (nReps + nSkip); rep += 1) {
        serial {
          this->start = CkWallTimer(); 
          receiver.run(nIters);
          for (auto it = 0; it < nIters; it += 1) {
            receiver.arrival(size, this->data); 
          }
        }
        when completion(void) serial {
          auto end = CkWallTimer();
          auto time = end - start;
          if (rep >= nSkip) {
            this->totalTime += time;
          }
        }
      }
      serial {
        auto avgTime = this->totalTime / this->nReps;
        auto totalSize = size * sizeof(double);
        auto bw = (totalSize * this->nIters) / (avgTime * 1024.0 * 1024.0);
        CkPrintf("%lu\t\t%g\n", totalSize, bw);
        delete[] this->data;
        thisProxy.next();
      }
    }
  };

  chare Receiver {
    entry Receiver(void);

    entry void arrival(int size, double arr[size]);

    entry void run(int nMsgs) {
      forall [it] (0:(nMsgs - 1),1) {
        when arrival(int size, double arr[size]) serial {}
      }
      serial { mainProxy.completion(); }
    }
  };

  readonly CProxy_Main mainProxy;
};
