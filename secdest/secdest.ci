mainmodule secdest {

  message cookie_msg;

  mainchare Main {
    entry [nokeep] Main(CkArgMsg* m);

    entry [threaded] void run(CkArrayCreatedMsg*);
  };

  readonly CProxy_Main mainProxy;

  array [1D] Contributor {
    entry Contributor(const int&);

    entry [reductiontarget] void redn_done(const int&);

    entry void run(cookie_msg* msg);

    entry void run(const int& numIters) {
      serial "do multicast" {
        QdCreate(1);

        if (kRecreateSection) {
          this->create_section();
        } else if (kRefreshSection) {
          this->secProxy.resetSection();
        }

        this->numIters = numIters;
        auto *msg = new cookie_msg(numIters);
        secProxy.run(msg);
      }
      for (this->it = 0; this->it < this->numIters; this->it += 1) {
        when redn_done(const int& sum) serial "validate" {
          CkAssert((sum % this->factor) == 0);
        }
      }
      serial "process" {

        QdProcess(1);
      }
    }
  };
};
